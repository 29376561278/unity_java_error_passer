import datetimeimport os,reimport sysimport timefrom mmgui import App, BrowserWindowimport subprocessfrom asset import unity_java_error_parser as ueapp = App(headless=False)win = Nonetool = []symbols = []file = []system = ()loop = ""file_name = ""CUR_DIR = os.path.dirname(os.path.abspath(__file__))log_data_path = os.path.join(CUR_DIR,"asset","log_data_extraction.py")data_dir = os.path.abspath(os.path.join(CUR_DIR, "data"))log_dir = os.path.join(data_dir, "log")os.makedirs(data_dir, exist_ok=True)os.makedirs(log_dir, exist_ok=True)app_name = "unity_java_error_parser"def judge(msg):    global tool    global symbols    global file    global file_name    if msg == 1:        tool = win.show_file_dialog_for_file("请选择工具", "*")        win.webview.send_message_to_js({"msg": "1"+tool[0]})    elif msg == 2:        file = win.show_file_dialog_for_file("请选择日志文件", "*")        deal = log_data_deal()        if deal == "-1":            win.webview.send_message_to_js({"msg": "2" + "该文件未发现backtrace堆栈"})            file_name = file[0]        else:            win.webview.send_message_to_js({"msg": "2"+file[0]})    elif msg == 3:        symbols = win.show_file_dialog_for_file("符号文件路径", "*")        get_sym_buildid()        win.webview.send_message_to_js({"msg": "3"+symbols[0]})def get_sym_buildid():    with open(symbols[0].replace("/", "\\"),"r") as j:        readline_so = j.readline()        readline = j.readline()        split_so = readline_so.split(" ")[-1]        split = readline.split(" ")[-1]        so_buildid = split_so + " " + split        win.webview.send_message_to_js({"msg": "8" + so_buildid})def log_data_deal():    global file_name    global file    global log_data_path    log_file_path = file[0].replace("/", "\\")    file_name = log_file_path.split("\\")[-1].rsplit(".")[0]+ "+backtrace.txt"    path = "python " + log_data_path + " " + log_file_path    getstatusoutput = subprocess.check_output(path).decode("utf-8")    print(getstatusoutput)    if getstatusoutput:        return "-1"    file_name = os.path.join(CUR_DIR, file_name)    read()    get_buildid()def files_info(msg: dict):    global system    global tool    global symbols    global file    if msg["unity_diff"] == {} and msg["cpp_diff"] == {}:       ue.parser(file_name,symbols[0],addr2line_path= tool[0])    elif msg["cpp_diff"] != {}:        ue.parser(file_name,symbols[0],cpp_diff = msg["cpp_diff"][0],addr2line_path= tool[0])    else:        ue.parser(file_name,symbols[0],unity_diff = msg["cpp_diff"][0],addr2line_path= tool[0])    data = ue.data    win.webview.send_message_to_js({"msg": "6" + data})    return Nonedef get_buildid():    global file_name    global system    build_id = ''    with open(file_name, "r",encoding="utf-8") as j:        read = j.read()    for item in read.split("#")[1::]:        if "libUE4.so" in item:            build_id +="libUE4" + item.split("BuildId:")[1].split(")")[0]+"\n"        elif "libunity.so"  in item:            build_id += "libunity" + item.split("BuildId:")[1].split(")")[0] + "\n"        elif "libil2ccp.so" in item:            build_id += "libil2ccp" + item.split("BuildId:")[1].split(")")[0] + "\n"    win.webview.send_message_to_js({"msg": "7" + build_id})def read():    global file_name    with open(file_name, "r") as j:        j.readline()        readline1 = j.readline()        readline2 = j.readline()        pattern = r"\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3} \d+ \d+ I CrasheyeNDK: \[Crash\]"        if re.search(pattern, readline1) and re.search(pattern, readline2):            win.webview.send_message_to_js({"msg": "4"+readline1.split("uuid:")[1]})            win.webview.send_message_to_js({"msg": "5"+readline2.split("appVersionName:")[1]})def create_file(msg):    global system    if msg == "ok":        dir_path = win.show_file_dialog_for_file("请选择要复制的路径", "*")        if dir_path != [] and os.path.isfile(dir_path[0]):            with open(dir_path[0], "w") as f:                f.write(system[1])        timestamp = time.time()        timestamp = str(int(timestamp))        temporary = file[0].split("/")[-1]        t_name = timestamp + temporary        with open(t_name, "w") as f:            f.write(system[1])def on_create(ctx):    global win    win = BrowserWindow({        "title": app_name,        "title": app_name,        "width": 1600,        "height": 900,        "dev_mode": False,    })    win.webview.load_file(os.path.join(CUR_DIR, "ui", "index.html"))    win.webview.bind_function("judge", judge)    win.webview.bind_function("create_file", create_file)    win.webview.bind_function("files_info", files_info)    win.show()def on_destroy(ctx):    print("on_destroy")    global win    if win:        win.close()def main():    global app    app = App(headless=False,              log_file=os.path.abspath(os.path.join(log_dir, '%s_%s.log' % (app_name, datetime.datetime.fromtimestamp(int(time.time())).strftime('%Y_%m_%d_%H%M%S')))),              )    app.on("create", on_create)    app.on("destroy", on_destroy)    exit_code = app.run()    print("sys.exit code=%d" % exit_code)    sys.exit(exit_code)if __name__ == "__main__":    main()